// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: grpcApi/main.proto

package grpcApi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MainClient is the client API for Main service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MainClient interface {
	GetMessageStream(ctx context.Context, in *MessageStreamRequest, opts ...grpc.CallOption) (Main_GetMessageStreamClient, error)
	PostMessageFromClient(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (*Empty, error)
	GetMasterProvider(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Provider, error)
}

type mainClient struct {
	cc grpc.ClientConnInterface
}

func NewMainClient(cc grpc.ClientConnInterface) MainClient {
	return &mainClient{cc}
}

func (c *mainClient) GetMessageStream(ctx context.Context, in *MessageStreamRequest, opts ...grpc.CallOption) (Main_GetMessageStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Main_ServiceDesc.Streams[0], "/grpcApi.Main/GetMessageStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &mainGetMessageStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Main_GetMessageStreamClient interface {
	Recv() (*ServerMessage, error)
	grpc.ClientStream
}

type mainGetMessageStreamClient struct {
	grpc.ClientStream
}

func (x *mainGetMessageStreamClient) Recv() (*ServerMessage, error) {
	m := new(ServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mainClient) PostMessageFromClient(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpcApi.Main/PostMessageFromClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainClient) GetMasterProvider(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Provider, error) {
	out := new(Provider)
	err := c.cc.Invoke(ctx, "/grpcApi.Main/GetMasterProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MainServer is the server API for Main service.
// All implementations must embed UnimplementedMainServer
// for forward compatibility
type MainServer interface {
	GetMessageStream(*MessageStreamRequest, Main_GetMessageStreamServer) error
	PostMessageFromClient(context.Context, *ClientMessage) (*Empty, error)
	GetMasterProvider(context.Context, *Empty) (*Provider, error)
	mustEmbedUnimplementedMainServer()
}

// UnimplementedMainServer must be embedded to have forward compatible implementations.
type UnimplementedMainServer struct {
}

func (UnimplementedMainServer) GetMessageStream(*MessageStreamRequest, Main_GetMessageStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMessageStream not implemented")
}
func (UnimplementedMainServer) PostMessageFromClient(context.Context, *ClientMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostMessageFromClient not implemented")
}
func (UnimplementedMainServer) GetMasterProvider(context.Context, *Empty) (*Provider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMasterProvider not implemented")
}
func (UnimplementedMainServer) mustEmbedUnimplementedMainServer() {}

// UnsafeMainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MainServer will
// result in compilation errors.
type UnsafeMainServer interface {
	mustEmbedUnimplementedMainServer()
}

func RegisterMainServer(s grpc.ServiceRegistrar, srv MainServer) {
	s.RegisterService(&Main_ServiceDesc, srv)
}

func _Main_GetMessageStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MessageStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MainServer).GetMessageStream(m, &mainGetMessageStreamServer{stream})
}

type Main_GetMessageStreamServer interface {
	Send(*ServerMessage) error
	grpc.ServerStream
}

type mainGetMessageStreamServer struct {
	grpc.ServerStream
}

func (x *mainGetMessageStreamServer) Send(m *ServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Main_PostMessageFromClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServer).PostMessageFromClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcApi.Main/PostMessageFromClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServer).PostMessageFromClient(ctx, req.(*ClientMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Main_GetMasterProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServer).GetMasterProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcApi.Main/GetMasterProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServer).GetMasterProvider(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Main_ServiceDesc is the grpc.ServiceDesc for Main service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Main_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcApi.Main",
	HandlerType: (*MainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostMessageFromClient",
			Handler:    _Main_PostMessageFromClient_Handler,
		},
		{
			MethodName: "GetMasterProvider",
			Handler:    _Main_GetMasterProvider_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMessageStream",
			Handler:       _Main_GetMessageStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpcApi/main.proto",
}
